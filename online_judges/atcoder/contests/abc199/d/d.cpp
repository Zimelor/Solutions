/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: mia_ortizma
 * Time: 2021-04-24 07:39:10
**/

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int MAX_N = 1000;
int N, M, A, B;

vector<int> adj[MAX_N];
bool vis[MAX_N];
bool colvis[MAX_N][3];
int col[MAX_N];
int colored = 0;

int component(int u) {
  int res = 1;
  vis[u] = true;
  for (auto v : adj[u]) {
    if (!vis[v]) {
      res += component(v);
    }
  }
  return res;
}

ll dfs(int u, int c) {
  colvis[u][c] = true;
  //cout << "in: " << u << " col:" << c << "\n";
  for (auto v : adj[u]) {
    if (col[v] == c) {
      return 0;
    }
  }
  col[u] = c;
  colored++;
  ll ans = 0;
  /*
  cout << colored << "\n";
  for (int k = 0; k < N; ++k) {
    cout << col[k] << " ";
  }
  cout << "\n";
  */
  if (colored == N) {
    //cout << "++\n";
    ans = 1;
  }
  for (auto v : adj[u]) {
    if (col[v] == -1) {
      for (int k = 0; k < 3; ++k) {
        if (k == c) continue;
        if (colvis[v][k]) continue;
        ans += dfs(v, k);
      }
    }
  }
  col[u] = -1;
  colored--;
  //cout << "out: " << u << "\n";
  return ans;
}

int main()
{
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  cin >> N >> M;
  for (int i = 0; i < M; ++i) {
    cin >> A >> B;
    A -= 1;
    B -= 1;
    adj[A].push_back(B);
    adj[B].push_back(A);
  }
  ll ans = 1;
  for (int i = 0; i < N; ++i) {
    if (!vis[i]) {
      int cnt = component(i);
      if (cnt == 1) {
        ans *= 3;
        continue;
      }
      ll cur = 0;
      for (int c = 0; c < 3; ++c) {
        colored = 0;
        for (int k = 0; k < N; ++k) {
          col[k] = -1;
          for (int p = 0; p < 3; ++p) {
            colvis[k][p] = false;
          }
        }
        int col_cur = dfs(i, c);
        //cout << col_cur << " " << c << "\n";
        //cout << "@@@@@@\n";
        cur += col_cur;
      }
      ans *= cur;
    }
  }
  cout << ans;

  return 0;
}
