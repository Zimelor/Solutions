/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: mia_ortizma
 * Time: 2021-05-08 07:13:37
**/

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int N_MAX = 210;
int arr[N_MAX];

vector<int> paths[N_MAX];

int main()
{
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  int N;
  cin >> N;
  for (int i = 0; i < N; ++i) {
    cin >> arr[i];
    int mod = arr[i] % 200;
    //cout << mod << "----\n";
    for (int j = 0; j < 200; ++j) {
      int modsum = (j + mod) % 200;
      if (!paths[j].empty() && !paths[modsum].empty()) {
        cout << "yes\n";
        vector<int> X = paths[j];
        vector<int> Y = paths[modsum];
        X.push_back(i + 1);
        cout << X.size() << " ";
        for (auto x : X) {
          cout << x << " ";
        }
        cout << "\n";
        cout << Y.size() << " ";
        for (auto x : Y) {
          cout << x << " ";
        }
        return 0;
      }
    }

    if (!paths[mod].empty()) {
      cout << "yes\n";
      cout << 1 << " " << (i + 1) << "\n";
      cout << paths[mod].size() << " ";
      for (auto x : paths[mod]) {
        cout << x << " ";
      }
      return 0;
    }

    vector<int> add;

    for (int j = 0; j < 200; ++j) {
      int modsum = (j + mod) % 200;
      if (!paths[j].empty() && paths[modsum].empty()) {
        add.push_back(j);
      }
    }

    for (auto x : add) {
      vector<int> cur = paths[x];
      cur.push_back(i + 1);
      paths[(x + mod) % 200] = cur;
    }

    if (paths[mod].empty()) {
      paths[mod].push_back(i + 1);
    }
    /*
    for (int j = 0; j < 200; ++j) {
      if (!paths[j].empty()) {
        cout << j << ":\n";
        for (auto x : paths[j]) {
          cout << x << " ";
        }
        cout << "\n\n";
      }
    }
    */
  }
  cout << "No";
  return 0;
}
