/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: mia_ortizma
 * Time: 2021-04-23 09:35:01
**/

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<pii, pii> edge;

const int INF = 1e9;
const int N_MAX = 510;

int N, M;

map<edge, int> adj;
int dx[] = { 0, 0, -1, 1 };
int dy[] = { 1, -1, 0, 0 };
int dp[N_MAX][N_MAX][40];

bool valid(int i, int j) {
  return 0 <= i && i < N && 0 <= j && j < M;
}

int main()
{
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  int K, E;
  cin >> N >> M >> K;
  if (K & 1) {
    for (int i = 0; i < N; ++i) {
      for (int j = 0; j < M; ++j) {
        cout << -1 << " ";
      }
      cout << "\n";
    }
    return 0;
  }
  for (int i = 0; i < N; ++i) {
    for (int j = 0; j < M - 1; ++j) {
      cin >> E;
      adj[{ {i, j}, { i, j + 1 }}] = E;
      adj[{ {i, j + 1}, { i, j }}] = E;
    }
  }
  for (int i = 0; i < N - 1; ++i) {
    for (int j = 0; j < M; ++j) {
      cin >> E;
      adj[{ {i, j}, { i + 1, j }}] = E;
      adj[{ {i + 1, j }, { i, j }}] = E;
    }
  }

  for (int i = 0; i < N; ++i) {
    for (int j = 0; j < N; ++j) {
      for (int k = 2; k <= K; k += 2) {
        dp[i][j][k] = INF;
      }
      dp[i][j][0] = 0;
    }
  }

  for (int k = 2; k <= K; k += 2) {
    for (int i = 0; i < N; ++i) {
      for (int j = 0; j < M; ++j) {
        for (int p = 0; p < 4; ++p) {
          int x = i + dx[p], y = j + dy[p];
          if (!valid(x, y)) continue;
          E = adj[{ {i, j}, { x, y }}];
          for (int kth = 2; kth <= k; kth += 2) {
            dp[i][j][k] = E * kth + dp[x][y][k - kth];
          }
          for (int kth = 0; kth <= k; kth += 2) {
            int xth = kth;
            int yth = k - kth;
          }
        }
        // other paths
      }
    }
  }

  for (int i = 0; i < N; ++i) {
    for (int j = 0; j < M; ++j) {
      cout << dp[i][j][K] << " ";
    }
    cout << "\n";
  }



  return 0;
}
