/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: mia_ortizma
 * Time: 2021-04-19 08:35:02
**/

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int MAX_N = 110;
int arr[MAX_N];

bool square(int x) {
  int orig_val = x;
  map<int, int> multiplicity;
  while (x % 2 == 0) {
    multiplicity[2] += 1;
    x /= 2;
  }
  for (int i = 3; i * i <= orig_val;i += 2) {
    while (x % i == 0) {
      multiplicity[i] += 1;
      x /= i;
    }
  }
  if (x != 1) {
    multiplicity[x] += 1;
  }
  for (auto& par : multiplicity) {
    if (par.second % 2 != 0) {
      return false;
    }
  }
  return true;
}

int main()
{
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  int T;
  cin >> T;
  while (T--) {
    int N;
    cin >> N;
    bool non_square = false;
    for (int i = 0; i < N; ++i) {
      cin >> arr[i];
      if (arr[i] != 1) {
        if (!square(arr[i])) {
          non_square = true;
        }
      }
    }
    if (non_square) {
      cout << "YES\n";
    }
    else {
      cout << "NO\n";
    }
    //cout << square(100) << "\n";
    //cout << square(10000) << "\n";

  }
  return 0;
}
