/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: mia_ortizma
 * Time: 2021-04-30 10:29:01
**/

#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int N_MAX = 2 * 1e5 + 1000;
bool special[N_MAX];
int d2a[N_MAX];
int ans[N_MAX];
int ansNode[N_MAX];

// adj
vector<int> adj[N_MAX];

void dfs2(int u, int p) {
  ansNode[u] = ansNode[p];
  ans[u] = ans[p] - 1;
  for (int v : adj[u]) {
    if (v != p) {
      dfs2(v, u);
    }
  }
}

int dfsD2A(int u, int p, int up, int d) {
  d2a[u] = d;
  int bestDown = -1;
  if (special[u]) {
    ans[u] = max(ans[u], d2a[u]);
    ansNode[u] = u;
    up = u;
    bestDown = u;
    //cout << u << " << special\n";
  }
  for (int v : adj[u]) {
    if (v != p) {
      int down = dfsD2A(v, u, up, d + 1);
      if (down != -1) {
        if (bestDown == -1) {
          bestDown = down;
        }
        else if (d2a[down] > d2a[bestDown]) {
          bestDown = down;
        }
      }
    }
  }
  /*
  if (u == 1) {
    cout << up << " " << bestDown << "@@@@\n";
  }
  */
  // special node up dfs tree.
  if (up != -1) {
    int cur = d2a[up] - (d2a[u] - d2a[up]);
    if (cur > ans[u]) {
      ans[u] = cur;
      ansNode[u] = up;
    }
  }
  if (bestDown != -1) {
    int cur = d2a[bestDown] - (d2a[bestDown] - d2a[u]);
    if (cur > ans[u]) {
      ans[u] = cur;
      ansNode[u] = bestDown;
    }

    return bestDown;
  }
  for (int v : adj[u]) {
    if (v != p && ansNode[p] == -1) {
      dfs2(v, u);
    }
  }
  if (special[u]) {
    return u;
  }
  else {
    return -1;
  }
}

int main()
{
  ios_base::sync_with_stdio(0);
  cin.tie(NULL);
  int T, N, K, ANCHOR, tmp, U, V;
  cin >> T;
  while (T--) {
    cin >> N >> K >> ANCHOR;
    // init
    for (int i = 1; i <= N; ++i) {
      special[i] = false;
      d2a[i] = 0;
      ans[i] = -(N + 1000);
      ansNode[i] = -1;
      adj[i].clear();
    }

    // input

    for (int i = 0; i < K; ++i) {
      cin >> tmp;
      special[tmp] = true;
    }
    for (int i = 0; i < N - 1; ++i) {
      cin >> U >> V;
      adj[U].push_back(V);
      adj[V].push_back(U);
    }

    // calculate d2a
    dfsD2A(ANCHOR, ANCHOR, -1, 0);
    dfs2(ANCHOR, ANCHOR);

    // print ans
    for (int i = 1; i <= N; ++i) {
      cout << ans[i] << " ";
    }
    cout << "\n";
    for (int i = 1; i <= N; ++i) {
      cout << ansNode[i] << " ";
    }
    cout << "\n";


  }


  return 0;
}
