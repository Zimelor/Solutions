import sys
import datetime
    
"""
def disp(mat):
  n = len(mat)
  for i in range(n):
    for j in range(n):
      print(mat[i][j], end='\t')
    print()
  print()
"""

def tup(mask):
  i = 0
  ret = []
  while mask > 0:
    if mask & 1:
      ret.append(i)
    mask >>= 1
    i += 1
  return tuple(ret)

N_LIM = 3100
N_ZERO = 1000

def go(dp, vis, times, time_limit, mask, p):
  if time_limit + N_ZERO < 0:
    return 0
  
  if vis[time_limit + N_ZERO][mask][p]:
    return dp[time_limit + N_ZERO][mask][p]
  vis[time_limit + N_ZERO][mask][p] = True
  
  n = len(times)
  
  best = 0
  tbest = tup(best)
  
  # grab all you have and leave this shit
  if p == n - 1 and time_limit >= 0:
    #print('time_limit', time_limit - N_ZERO)
    #print(mask)
    #print(tup(mask))
    best = mask
    tbest = tup(best)
  # try going back (all places)
  for i in range(n):
    if i != p:
      nmask = mask
      # grab that bunny
      # ignore start and exits
      if i > 0 and i < n - 1:
        nmask |= (1 << (i - 1))
      nmask = go(dp, vis, times, time_limit - times[p][i], nmask, i)
      tnmask = tup(nmask)
      if len(tnmask) > len(tbest):
        best = nmask
        tbest = tnmask
      elif len(tnmask) == len(tbest) and tnmask < tbest:
        best = nmask
        tbest = tnmask

  dp[time_limit + N_ZERO][mask][p] = best
  return best
  
  
def solution(times, times_limit):
  #x, y, z = len(dp), len(dp[0]), len(dp[0][0])
  #print(x, y, z)

  print(len(times))
  
  sys.setrecursionlimit(1500)
  INF = int(1e9)
  
  n = len(times)
  #dist = [[0 for j in range(n)] for i in range(n)]
  dist = times
  #print()
  
  #disp(dist)
  # Floyd-Warshall
  for k in range(n):
    for i in range(n):
      for j in range(n):
        if dist[i][j] > dist[i][k] + dist[k][j]:
          dist[i][j] = dist[i][k] + dist[k][j]

  # Detect Negative Cycle
  for i in range(n):
    if dist[i][i] < 0:
      return list(range(n - 2))
  
  dp = [ [ [0 for k in range(7) ] for j in range(1 << (n - 1) - 1)] for i in range(N_LIM)]
  vis = [ [ [False for k in range(7) ] for j in range(1 << (n - 1) - 1)] for i in range(N_LIM)]
  
  

  
  #disp(dist)    
        
  # Your code here
  bmask = go(dp, vis, times, times_limit, 0, 0)
  ans = list(tup(bmask))
  #print('ans')
  #print(ans)
  return ans
    
print(sys.getrecursionlimit())

counter = 0
def test(times, time_limit, expectedFreedBunnies):
  global counter
  # Print input graph:
  print(str(counter) + ". input: (time_limit="+ str(time_limit) +")")
  counter+=1
  for row in range(len(times)):
      print(row, times[row])
  startTime = datetime.datetime.now()      
  final = solution(times, time_limit)  
  print("answer:", final)
  print("Expected", expectedFreedBunnies)
  assert final == expectedFreedBunnies, 'answer is not correct!'
  print("Execution time: "+ str((datetime.datetime.now() - startTime)))
  print("============================================================================")

assert(
  solution(
    [[0, 2, 2, 2, -1],
     [9, 0, 2, 2, -1],
     [9, 3, 0, 2, -1],
     [9, 3, 2, 0, -1],
     [9, 3, 2, 2, 0]],
    1)
  == [1, 2]
)


assert(
  solution(
    [[0, 2, 2, 2, -1],
     [9, 0, 2, 2, -1],
     [9, 3, 0, 2, -1],
     [9, 3, 2, 0, -3],
     [9, 3, 2, 2, 0]],
    1)
  == [0, 1, 2]
)

assert(
  solution([[0, 1, 1, 1, 1],
            [1, 0, 1, 1, 1],
            [1, 1, 0, 1, 1],
            [1, 1, 1, 0, 1],
            [1, 1, 1, 1, 0]],
           3)
  == [0, 1]
)

test([[1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1]], 1, [])
"""
test([[0,  1,  5,  5,  2],
      [10, 0,  2,  6,  10],
      [10, 10, 0,  1,  5],
      [10, 10, 10, 0,  1],
      [10, 10, 10, 10, 0]], 5, [0, 1, 2]) 


test([[0, 1, 3, 4, 2],
      [10, 0, 2, 3, 4],
      [10, 10, 0, 1, 2],
      [10, 10, 10, 0, 1],
      [10, 10, 10, 10, 0]], 4, [])    

    
test([[0, 2, 2, 2, -1],
      [9, 0, 2, 2, -1],
      [9, 3, 0, 2, -1],
      [9, 3, 2, 0, -1],
      [9, 3, 2, 2, 0]], 1, [1, 2])

    
test([[0,  1, 10, 10, 10],
      [10, 0,  1,  1,  2],
      [10, 1,  0, 10, 10],
      [10, 1,  10, 0, 10],
      [10, 10, 10, 10, 0]], 7, [0, 1, 2])

    
test([[0, 1, 1, 1, 1],
      [1, 0, 1, 1, 1],
      [1, 1, 0, 1, 1],
      [1, 1, 1, 0, 1],
      [1, 1, 1, 1, 0]], 3, [0, 1])

    
test([[0, 5, 11, 11, 1],
      [10, 0, 1, 5, 1],
      [10, 1, 0, 4, 0],
      [10, 1, 5, 0, 1],
      [10, 10, 10, 10, 0]], 10, [0, 1])

    
test([[0, 20, 20, 20, -1],
      [90, 0, 20, 20, 0],
      [90, 30, 0, 20, 0],
      [90, 30, 20, 0, 0],
      [-1, 30, 20, 20, 0]], 0, [0, 1, 2])

    
test([[0, 10, 10, 10, 1],
      [0, 0, 10, 10, 10],
      [0, 10, 0, 10, 10],
      [0, 10, 10, 0, 10],
      [1, 1, 1, 1, 0]], 5, [0, 1])

    
test([[2, 2],
      [2, 2]], 5, [])

    
test([[0, 10, 10, 1, 10],
      [10, 0, 10, 10, 1],
      [10, 1, 0, 10, 10],
      [10, 10, 1, 0, 10],
      [1, 10, 10, 10, 0]], 6, [0, 1, 2])

    


test([[0, 0, 1, 1, 1],
      [0, 0, 0, 1, 1],
      [0, 0, 0, 0, 1],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0]], 0, [0, 1, 2])

test([[1, 1, 1, 1, 1],
      [-1, 1, 1, 1, 1],
      [-1, 1, 1, 1, 1],
      [-1, 1, 1, 1, 1],
      [-1, 1, 1, 1, 1]], 1, [0, 1, 2])

test([[0, 1, 5, 5, 5, 5],
      [5, 0, 1, 5, 5, 5],
      [5, 5, 0, 5, 5, -1],
      [5, 5, 1, 0, 5, 5],
      [5, 5, 1, 5, 0, 5],
      [5, 5, 1, 1, 1, 0]]
      , 3, [0, 1, 2, 3])

test([[0, 1, 5, 5, 5, 5, 5],
      [5, 0, 1, 5, 5, 5, 5],
      [5, 5, 0, 5, 5, 0, -1],
      [5, 5, 1, 0, 5, 5, 5],
      [5, 5, 1, 5, 0, 5, 5],
      [5, 5, 0, 5, 5, 0, 0],
      [5, 5, 1, 1, 1, 0, 0]]
      , 3, [0, 1, 2, 3, 4])

test([[0,-1, 0, 9, 9, 9, 9, 9],  # Start
      [9, 0, 1, 9, 9, 9, 9, 9],  # 0
      [0, 9, 0, 0, 9, 9, 1, 1],  # 1
      [9, 9, 9, 0, 1, 9, 9, 9],  # 2
      [9, 9, 9, 9, 0,-1, 9, 9],  # 3 
      [9, 9, 0, 9, 9, 0, 9, 9],  # 4
      [9, 9,-1, 9, 9, 9, 0, 9],  # 5
      [9, 9, 9, 9, 9, 9, 9, 0]], # bulkhead
      1, [0, 1, 2, 3, 4, 5])

test([[0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0]], 0, [0, 1, 2])

test([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 
      0, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])

test([[0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
      [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
      [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 
      5, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])
"""
